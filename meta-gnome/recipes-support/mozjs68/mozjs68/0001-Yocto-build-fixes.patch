From 2dc4bb1511f98ba495d2d279886e495a8f38b79a Mon Sep 17 00:00:00 2001
From: David McKinney <mckinney@subgraph.com>
Date: Thu, 2 Jul 2020 17:07:39 +0000
Subject: [PATCH] Yocto build fixes

---
 build/moz.configure/init.configure | 18 -----------
 build/moz.configure/rust.configure | 49 +++++++++++++++++++++++-------
 configure.py                       | 10 +++++-
 js/src/build/js.pc.in              |  2 +-
 4 files changed, 48 insertions(+), 31 deletions(-)

diff --git a/build/moz.configure/init.configure b/build/moz.configure/init.configure
index c77260403..6113f620f 100644
--- a/build/moz.configure/init.configure
+++ b/build/moz.configure/init.configure
@@ -256,24 +256,6 @@ def virtualenv_python(env_python, build_env, mozconfig, help):
     else:
         python = sys.executable
 
-    if not manager.up_to_date(python):
-        log.info('Creating Python environment')
-        manager.build(python)
-
-    python = normsep(manager.python_path)
-
-    if not normsep(sys.executable).startswith(normsep(virtualenvs_root)):
-        log.info('Reexecuting in the virtualenv')
-        if env_python:
-            del os.environ['PYTHON']
-        # One would prefer to use os.execl, but that's completely borked on
-        # Windows.
-        sys.exit(subprocess.call([python] + sys.argv))
-
-    # We are now in the virtualenv
-    if not distutils.sysconfig.get_python_lib():
-        die('Could not determine python site packages directory')
-
     return python
 
 
diff --git a/build/moz.configure/rust.configure b/build/moz.configure/rust.configure
index 9647cbc40..1d68639af 100644
--- a/build/moz.configure/rust.configure
+++ b/build/moz.configure/rust.configure
@@ -46,15 +46,15 @@ def unwrap_rustup(prog, name):
     @imports('os')
     def unwrap(prog, name):
         def from_rustup_which():
-            out = check_cmd_output('rustup', 'which', name,
-                                   executable=prog).rstrip()
+        #    out = check_cmd_output(name, "-V",
+        #                           executable=prog).rstrip()
             # If for some reason the above failed to return something, keep the
             # PROG we found originally.
-            if out:
-                log.info('Actually using \'%s\'', out)
-                return out
+        #     if out:
+        #         log.info('Actually using \'%s\'', out)
+        #        return out
 
-            log.info('No `rustup which` output, using \'%s\'', prog)
+        #    log.info('No `rustup which` output, using \'%s\'', prog)
             return prog
 
         (retcode, stdout, stderr) = get_cmd_output(prog, '+stable')
@@ -217,6 +217,27 @@ def rust_supported_targets(rustc):
             per_os[key] = t
     return namespace(per_os=per_os, per_raw_os=per_raw_os)
 
+option(env='RUST_HOST',
+       nargs=1,
+       help='Define the system type for Rust performing the build')
+
+@depends('RUST_HOST')
+@checking('rust host', lambda host: host)
+def rust_host_env(value):
+    if value:
+        return value[0]
+
+
+option(env='RUST_TARGET',
+       nargs=1,
+       help='Define the system type for Rust where the resulting executables will be used')
+
+@depends('RUST_TARGET')
+@checking('rust target', lambda target: target)
+def rust_target_env(value):
+    if value:
+        return value[0]
+
 
 @template
 def rust_triple_alias(host_or_target):
@@ -227,9 +248,9 @@ def rust_triple_alias(host_or_target):
     assert host_or_target in {host, target}
 
     host_or_target_str = {host: 'host', target: 'target'}[host_or_target]
-
-    @depends(rustc, host_or_target, c_compiler, rust_supported_targets,
-             arm_target, when=rust_compiler)
+    @depends(rustc, host_or_target, rust_host_env, rust_target_env,
+             c_compiler, rust_supported_targets, arm_target,
+             when=rust_compiler)
     @checking('for rust %s triplet' % host_or_target_str)
     @imports('os')
     @imports('subprocess')
@@ -237,8 +258,14 @@ def rust_triple_alias(host_or_target):
     @imports(_from='mozbuild.shellutil', _import='quote')
     @imports(_from='tempfile', _import='mkstemp')
     @imports(_from='textwrap', _import='dedent')
-    def rust_target(rustc, host_or_target, compiler_info,
-                    rust_supported_targets, arm_target):
+    def rust_target(rustc, host_or_target, rust_host_env, rust_target_env,
+                    compiler_info, rust_supported_targets, arm_target):
+
+        specified_targets = {"host": rust_host_env, "target": rust_target_env}
+        specified_target = specified_targets[host_or_target_str]
+        if (specified_target):
+            return specified_target
+
         # Rust's --target options are similar to, but not exactly the same
         # as, the autoconf-derived targets we use.  An example would be that
         # Rust uses distinct target triples for targetting the GNU C++ ABI
diff --git a/configure.py b/configure.py
index 913dd35f9..51cda0cef 100644
--- a/configure.py
+++ b/configure.py
@@ -13,7 +13,15 @@ import textwrap
 
 
 base_dir = os.path.abspath(os.path.dirname(__file__))
-sys.path.insert(0, os.path.join(base_dir, 'python', 'mozbuild'))
+sys.path.insert(0, os.path.join(base_dir, 'config'))
+def get_immediate_subdirectories(a_dir):
+    return [name for name in os.listdir(a_dir)
+            if os.path.isdir(os.path.join(a_dir, name))]
+for s in ["python", "testing/mozbase", "third_party/python"]:
+    sub_dir = os.path.join(base_dir, s)
+    for module_dir in get_immediate_subdirectories(sub_dir):
+        sys.path.insert(0, os.path.join(sub_dir, module_dir))
+
 from mozbuild.configure import (
     ConfigureSandbox,
     TRACE,
diff --git a/js/src/build/js.pc.in b/js/src/build/js.pc.in
index d40deb174..e2044c20a 100644
--- a/js/src/build/js.pc.in
+++ b/js/src/build/js.pc.in
@@ -11,4 +11,4 @@ Libs: -L${libdir} -l@JS_LIBRARY_NAME@
 # Use -isystem for includes rather than -I, to mark them as "system headers"
 # that don't generate warning diagnostics. For justification, see
 # https://bugzilla.mozilla.org/show_bug.cgi?id=1539036
-Cflags: -include ${includedir}/@JS_LIBRARY_NAME@/js/RequiredDefines.h -isystem ${includedir}/@JS_LIBRARY_NAME@
+Cflags: -I${includedir}/@JS_LIBRARY_NAME@
